// Copyright 2024 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert CHANNEL_TILE % 16 == 0
$assert CHANNEL_TILE >= 16
$SIMD_TILE = CHANNEL_TILE // 16
$assert ACCUMULATORS <= SIMD_TILE

#include <assert.h>

#include <arm_neon.h>

#include "xnnpack/common.h"
#include "xnnpack/reduce.h"

$ACC_SUFFIX = "" if ACCUMULATORS == 1 else "_acc%d" % ACCUMULATORS
void xnn_qu8_rsum_ukernel__neon_u${CHANNEL_TILE}${ACC_SUFFIX}(
    size_t batch,
    const uint8_t* input,
    uint32_t* output,
    const struct xnn_qs8_rsum_params params[restrict XNN_MIN_ELEMENTS(1)]) XNN_OOB_READS
{
  assert(batch != 0);
  assert(input != NULL);
  assert(output != NULL);
  assert(params != NULL);

  XNN_ALIGN(16) static const uint8_t onemask_table[32] = {
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  };

  $for A in range(ACCUMULATORS):
    uint32x4_t vacc${A} = vmovq_n_u32(0);

  // 256 uint8s may be summed into an uint16 before overflowing.
  // Each register has 8 lanes and there are ${ACCUMULATORS} accumulators so batch size is ${ACCUMULATORS*256*8}

  for (; batch >= ${ACCUMULATORS*256*8}; batch -= ${ACCUMULATORS*256*8}) {
    $for A in range(ACCUMULATORS):
      uint16x8_t vacc16_${A} = vmovq_n_u16(0);
    for (size_t current_batch = ${ACCUMULATORS*256*8}; current_batch > 0; current_batch -= ${CHANNEL_TILE}) {
      $for N in range(SIMD_TILE):
        const uint8x16_t vt${N} = vld1q_u8(input); input += 16;
      $for N in range(SIMD_TILE):
        vacc16_${N % ACCUMULATORS} = vpadalq_u8(vacc16_${N % ACCUMULATORS}, vt${N});
    }
    $for A in range(ACCUMULATORS):
      vacc${A} = vpadalq_u16(vacc${A}, vacc16_${A});
  }

  $if CHANNEL_TILE > 16:
    if (XNN_LIKELY(batch >= ${CHANNEL_TILE})) {
      assert(batch >= 1 && batch < ${ACCUMULATORS*256*8});
      $for A in range(ACCUMULATORS):
        uint16x8_t vacc16_${A} = vmovq_n_u16(0);
      for (; batch >= ${CHANNEL_TILE}; batch -= ${CHANNEL_TILE}) {
        $for N in range(SIMD_TILE):
          const uint8x16_t vt${N} = vld1q_u8(input); input += 16;
        $for N in range(SIMD_TILE):
          vacc16_${N % ACCUMULATORS} = vpadalq_u8(vacc16_${N % ACCUMULATORS}, vt${N});
      }
      $for A in range(ACCUMULATORS):
        vacc${A} = vpadalq_u16(vacc${A}, vacc16_${A});
    }
  if (XNN_UNLIKELY(batch != 0)) {
    assert(batch >= 1 && batch < ${256*8});
    uint16x8_t vacc16 = vmovq_n_u16(0);
    for (; batch >= 16; batch -= 16) {
      const uint8x16_t vt = vld1q_u8(input); input += 16;
      vacc16 = vpadalq_u8(vacc16, vt);
    }
    if (XNN_UNLIKELY(batch != 0)) {
      const uint8x16_t vt = vld1q_u8(input);
      const uint8x16_t vonemask = vld1q_u8(&onemask_table[16 - batch]);
      const uint8x16_t vtm = vmulq_u8(vt, vonemask);
      vacc16 = vpadalq_u8(vacc16, vtm);
    }
    vacc0 = vpadalq_u16(vacc0, vacc16);
  }
  $if ACCUMULATORS > 1:
    $ACC_SLICE = 1
    $while ACC_SLICE < ACCUMULATORS:
      $for A in range(0, ACCUMULATORS, ACC_SLICE * 2):
        $if A + ACC_SLICE < ACCUMULATORS:
          vacc${A} = vaddq_u32(vacc${A}, vacc${A + ACC_SLICE});
      $ACC_SLICE *= 2
  #if XNN_ARCH_ARM64
    const uint32_t vacc = vaddvq_u32(vacc0);
  #else
    uint32x2_t vacc_lo = vadd_u32(vget_low_u32(vacc0), vget_high_u32(vacc0));
    vacc_lo = vpadd_u32(vacc_lo, vacc_lo);
    const uint32_t vacc = vget_lane_u32(vacc_lo, 0);
  #endif

  *output += vacc;
}
